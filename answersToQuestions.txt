1. Распространение событий в JavaScript
    Это процесс, в котором событие распространяется по дереву DOM от верхнего урокня до целевого и обратно.
    Это позволяет обработать событие на разных уровнях.
    Процесс распространения событий состоит из трёх фаз:
        1. Фаза погружения - событие идёт от корневого к целевому элементу
        2. Фаза цели - событие достигло целевого элемента
        3. Фаза всплытия - событие перемещается от целевого элемента обратно к корневому 
    Практическое применение можно разделить на 3 части:
        1. Делегирование событий
        2. Прекращение распространения (например stopPropagation)
        3. Предотвращение действия по умолчанию (например preventDefault)

2. Promise в JavaScript и асинхронность
    Promise - это объект, который предоставляет результат выполнения асинхронной операции (успешно или с ошибкой).
    Операция выполняемая асинхронно выполняется независимо от окружающего её кода и не блокирует выполнение кода в котором она была вызвана.
    Состояния promise:
        1. Pending (ожидание)
        2. Fulfilled (выполнено успешно)
        3. Rejected (выполнено с ошибкой)
    Альтернативные способы обработки асинхронности:
        1. Callback функции
        2. Async/await
    Event Loop управляет асинхронными операциями и очередями событий

3. ООП (объектно-ориентированное программирование) 
    Это парадигма программирования, основанная на объектах, содержащих данные и методы
    Ключевые принципы ООП:
        1. Инкапсуляция
            Суть: сокрытие внутреннего состояния объекта и предоставление доступа к нему только через строго определённые методы.
            Например:
                class Counter {
                    #count = 0;

                    increment() {
                        this.#count ++;
                    }

                    getCount() {
                        return this.#count;
                    }
                }
            В JS 
        2. Наследование
            Суть: создание нового класса на основе существующего
            Пример:
            function Animal(name) {
                this.name = name;
            }

            Animal.prototype.speak = function() {
                console.log(this.name + ' издаёт звук');
            }

            function Dog() {
                Animal.call(this, 'DOG');
            }
            Dog.prototype = Object.create(Animal.prototype);
            Dog.prototype.constructor = Dog;

            Dog.prototype.speak = function() {
                console.log(this.name + ' лает');
            }

            const cat = new Animal('CAT');
            cat.speak();
            const dog = new Dog();
            dog.speak();
        3. Абстракция
            Суть:  выделение важных характеристик объекта и игнорирование несущественных деталей

            function Dog() {
                Animal.call(this, 'DOG');

                this.eats = function() {
                    // eats
                }

                this.sleep = function() {
                    // sleep
                }

                this.happy = function() {
                    this.eats();
                    this.sleep();
                    console.log(this.name + ' стастлива');
                }
            }
        4. Полиформизм
            Суть: возможность объектов разных классов использовать одинаковые методы, но при этом реализовывать их по разному

        В JS ООП реализовано через классы и прототипы.
        Классы в JavaScript - это синтаксический сахар на существующим механизмом прототипного наследования. Они позволяют создавать
        шаблоны для объектов, которые определяют, какими свойствами и методами он обладает.
        Прототип - это механизм с помощью которого объекты JavaScript наследуют свойства друг друга.

4. Обработка URL браузером

    Процесс обработки URL:
        1. Ввод URL и парсинг. Браузер извлекает протокол, домен, путь и параметры
        2. DNS-запрос. Преобразование доменного имени в IP-адрес.
        3. Установка TCP-соединения.
        4. TLS handshake. Обмен сертификатами и установка безопасного соединения (для HTTPS)
        5. HTTP-запрос к серверу
        6. Обработка на сервере
        7. Получение ответа от сервера
        8. Парсинг HTML
        9. Парсинг CSS
        10. Выполнение JavaScript
        11. Рендеринг.

    Технологии для ускорения:
        1. Кэширование
        2. Сжатие файлов
        3. Минификация файлов
        4. Асинхронная загрузка
        5. CDN
        
    Проблемы:
        1. Межсайтовый скриптинг XSS
        2. Межсайтовая подделка запроса CSRF
        3. Утечка конфиденциальных данных
        4. CORS 